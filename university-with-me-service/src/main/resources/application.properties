server.port=8081
#
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://127.0.0.1:5444/education_app?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&characterEncoding=UTF-8
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=35
#spring.datasource.hikari.minimum-idle=20
#
## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect
spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
#
## Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC
spring.jackson.serialization.fail-on-empty-beans=false
spring.liquibase.change-log=classpath:/db/master.xml
spring.main.allow-bean-definition-overriding=true
#
## MULTIPART (MultipartProperties)
spring.servlet.multipart.enabled=true
spring.servlet.multipart.file-size-threshold=2KB
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=6MB
#
## File Storage Properties
# All files uploaded through the REST API will be stored in this directory
main.upload.directory=educationapp
files.upload.directory=files
avatars.upload.directory=avatars
#
keycloak.realm=test
keycloak.auth-server-url=http://localhost:8080/auth
keycloak.resource=EducationApp-Service
keycloak.credentials.secret=7QBqMplShgrMrYbewRqreg0IPmN7akGA
keycloak.bearer-only=true
#
spring.security.oauth2.client.registration.keycloak.provider=keycloak
spring.security.oauth2.client.registration.keycloak.client-id=${keycloak.resource}
spring.security.oauth2.client.registration.keycloak.client-secret=${keycloak.credentials.secret}
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.keycloak.scope=openid
spring.security.oauth2.client.provider.keycloak.authorization-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=${keycloak.auth-server-url}/realms/${keycloak.realm}/protocol/openid-connect/token
#
server.error.include-message=always
#